!function(t){var e={};function r(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=2)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Point=class{constructor(t,e){this.x=t,this.y=e}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t,e,r,i){this.x=t,this.y=e,this.h=r,this.w=i,this.calculateBorders()}calculateBorders(){this.leftBorder=this.x-this.w/2,this.rightBorder=this.x+this.w/2,this.topBorder=this.y-this.h/2,this.bottomBorder=this.y+this.h/2}contains(t){return t.x>=this.leftBorder&&t.x<=this.rightBorder&&t.y>=this.topBorder&&t.y<=this.bottomBorder}copy(){return new i(this.x,this.y,this.h,this.w)}add(t,e){return this.x+=t,this.y+=e,this}divide(){return this.w/=2,this.h/=2,this}createChild(t,e){let r=this.copy();r.divide();let i=r.w/2,s=r.h/2;return t=Math.sign(t)*i,e=Math.sign(e)*s,r.add(t,e),r.calculateBorders(),r}intersects(t){return this.leftBorder<=t.rightBorder&&t.leftBorder<=this.rightBorder&&this.topBorder<=t.bottomBorder&&t.topBorder<=this.bottomBorder}}e.Boundary=i;class s{constructor(t,e){this.boundary=t,this.capacity=e,this.points=[],this.children={nw:null,ne:null,sw:null,se:null,isSet:!1}}setRenderer(t){return this.renderer=t,this}show(){let t=this.renderer;t.rectMode(t.CENTER),t.strokeWeight(2),t.stroke(255,255,255),t.noFill(),t.rect(this.boundary.x,this.boundary.y,this.boundary.w,this.boundary.h),this.points.forEach(e=>{t.strokeWeight(4),t.stroke(200,54,100),t.point(e.x,e.y)}),this.itarate(t=>{t.show()})}static create(t,e){let r=new i(t.x,t.y,t.h,t.w);return new s(r,e)}subdivide(){this.children.nw=new s(this.boundary.createChild(-1,-1),this.capacity).setRenderer(this.renderer),this.children.ne=new s(this.boundary.createChild(1,-1),this.capacity).setRenderer(this.renderer),this.children.sw=new s(this.boundary.createChild(-1,1),this.capacity).setRenderer(this.renderer),this.children.se=new s(this.boundary.createChild(1,1),this.capacity).setRenderer(this.renderer),this.children.isSet=!0}insert(t){return!!this.boundary.contains(t)&&(this.points.length<this.capacity?this.points.push(t):(this.children.isSet||this.subdivide(),this.itarate(e=>{if(e.insert(t))return!0})),!0)}query(t){let e=[];return this.boundary.intersects(t)?(this.points.forEach(r=>{t.contains(r)&&e.push(r)}),this.itarate(r=>{e=e.concat(r.query(t))}),e):e}itarate(t=(t=>{})){if(this.children.isSet)for(let e in this.children)this.children[e]instanceof s&&t(this.children[e])}}e.Quadtree=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=r(1),s=r(0);let n,h,o=[];new p5(function(t){t.setup=function(){t.createCanvas(800,800),(n=i.Quadtree.create({x:t.width/2,y:t.height/2,w:t.width,h:t.height},4)).setRenderer(t);for(let e=0;e<3e3;e++){let e=t.randomGaussian(t.width/2,t.width/4),r=t.randomGaussian(t.height/2,t.height/4),i=new s.Point(e,r);n.insert(i)}h=new i.Boundary(t.width/2,t.height/2,100,100),console.log(n)},t.draw=function(){t.background(51),n.show(),t.strokeWeight(2),t.stroke(50,200,50),t.rect(h.x,h.y,h.w,h.h),o.forEach(e=>{t.strokeWeight(4),t.point(e.x,e.y)})},t.mouseClicked=function(){let e=new s.Point(t.mouseX,t.mouseY);n.insert(e)},t.mouseMoved=function(){h.x=t.mouseX,h.y=t.mouseY,h.calculateBorders(),o=n.query(h)}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvcG9pbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvcXVhZHRyZWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJQb2ludCIsIltvYmplY3QgT2JqZWN0XSIsIngiLCJ5IiwidGhpcyIsIkJvdW5kYXJ5IiwiaCIsInciLCJjYWxjdWxhdGVCb3JkZXJzIiwibGVmdEJvcmRlciIsInJpZ2h0Qm9yZGVyIiwidG9wQm9yZGVyIiwiYm90dG9tQm9yZGVyIiwicG9pbnQiLCJjb3B5IiwiZGl2aWRlIiwiaGFsZldpZHRoIiwiaGFsZkhlaWdodCIsIk1hdGgiLCJzaWduIiwiYWRkIiwiYiIsIlF1YWR0cmVlIiwiYm91bmRhcnkiLCJjYXBhY2l0eSIsInBvaW50cyIsImNoaWxkcmVuIiwibnciLCJuZSIsInN3Iiwic2UiLCJpc1NldCIsInJlbmRlcmVyIiwicmVjdE1vZGUiLCJDRU5URVIiLCJzdHJva2VXZWlnaHQiLCJzdHJva2UiLCJub0ZpbGwiLCJyZWN0IiwiZm9yRWFjaCIsIml0YXJhdGUiLCJjaGlsZCIsInNob3ciLCJwYXJhbXMiLCJjcmVhdGVDaGlsZCIsInNldFJlbmRlcmVyIiwiY29udGFpbnMiLCJsZW5ndGgiLCJwdXNoIiwic3ViZGl2aWRlIiwiaW5zZXJ0IiwiaW50ZXJzZWN0cyIsImNvbmNhdCIsInF1ZXJ5IiwiY2FsbGJhY2siLCJxdWFkdHJlZV8xIiwicG9pbnRfMSIsInF1YWRUcmVlIiwic2VhcmNoQXJlYSIsImZvdW5kIiwicDUiLCJzZXR1cCIsImNyZWF0ZUNhbnZhcyIsImNyZWF0ZSIsIndpZHRoIiwiaGVpZ2h0IiwicmFuZG9tR2F1c3NpYW4iLCJjb25zb2xlIiwibG9nIiwiZHJhdyIsImJhY2tncm91bmQiLCJwdCIsIm1vdXNlQ2xpY2tlZCIsIm1vdXNlWCIsIm1vdXNlWSIsIm1vdXNlTW92ZWQiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWpCLEdBQ0FZLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURrQixPQUFBLEtBSWpEcEIsRUFBQXFCLEVBQUEsU0FBQWxCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQW1CLFdBQ0EsV0FBMkIsT0FBQW5CLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFVLEVBQUFDLEdBQXNELE9BQUFWLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBZ0IsRUFB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ZSxXQUNiLElBQUkzRCxFQUFRLElBQUkyQyxFQUFBeEQsTUFBTUYsRUFBRTJFLE9BQVEzRSxFQUFFNEUsUUFDbENqQixFQUFTUCxPQUFPckMsSUFHcEJmLEVBQUU2RSxXQUFhLFdBQ1hqQixFQUFXeEQsRUFBSUosRUFBRTJFLE9BQ2pCZixFQUFXdkQsRUFBSUwsRUFBRTRFLE9BQ2pCaEIsRUFBV2xELG1CQUVYbUQsRUFBUUYsRUFBU0osTUFBTUsiLCJmaWxlIjoiLi9idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIpO1xuIiwiZXhwb3J0IGNsYXNzIFBvaW50IHtcbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICB9XG59IiwiaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFF1YWR0cmVlQ2hpbGRyZW4ge1xuICAgIG53OiBRdWFkdHJlZSxcbiAgICBuZTogUXVhZHRyZWUsXG4gICAgc3c6IFF1YWR0cmVlLFxuICAgIHNlOiBRdWFkdHJlZSxcbiAgICBpc1NldDogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJvdW5kYXJ5UGFyYW1zIHtcbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xuICAgIGg6IG51bWJlcjtcbiAgICB3OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBCb3VuZGFyeSB7XG4gICAgbGVmdEJvcmRlcjogbnVtYmVyO1xuICAgIHJpZ2h0Qm9yZGVyOiBudW1iZXI7XG4gICAgdG9wQm9yZGVyOiBudW1iZXI7XG4gICAgYm90dG9tQm9yZGVyOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgeDogbnVtYmVyLCBwdWJsaWMgeTogbnVtYmVyLCBwdWJsaWMgaDogbnVtYmVyLCBwdWJsaWMgdzogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlQm9yZGVycygpO1xuICAgIH1cblxuICAgIGNhbGN1bGF0ZUJvcmRlcnMoKSB7XG4gICAgICAgIHRoaXMubGVmdEJvcmRlciA9IHRoaXMueCAtIHRoaXMudyAvIDI7XG4gICAgICAgIHRoaXMucmlnaHRCb3JkZXIgPSB0aGlzLnggKyB0aGlzLncgLyAyO1xuICAgICAgICB0aGlzLnRvcEJvcmRlciA9IHRoaXMueSAtIHRoaXMuaCAvIDI7XG4gICAgICAgIHRoaXMuYm90dG9tQm9yZGVyID0gdGhpcy55ICsgdGhpcy5oIC8gMjtcbiAgICB9XG5cbiAgICBjb250YWlucyhwb2ludDogUG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIChwb2ludC54ID49IHRoaXMubGVmdEJvcmRlciAmJiBwb2ludC54IDw9IHRoaXMucmlnaHRCb3JkZXJcbiAgICAgICAgJiYgcG9pbnQueSA+PSB0aGlzLnRvcEJvcmRlciAmJiBwb2ludC55IDw9IHRoaXMuYm90dG9tQm9yZGVyKTtcbiAgICB9XG5cbiAgICBjb3B5KCkge1xuICAgICAgICByZXR1cm4gbmV3IEJvdW5kYXJ5KHRoaXMueCwgdGhpcy55LCB0aGlzLmgsIHRoaXMudyk7XG4gICAgfVxuXG4gICAgYWRkKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMueCArPSB4O1xuICAgICAgICB0aGlzLnkgKz0geTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkaXZpZGUoKSB7XG4gICAgICAgIHRoaXMudyAvPSAyO1xuICAgICAgICB0aGlzLmggLz0gMjtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjcmVhdGVDaGlsZCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBsZXQgYyA9IHRoaXMuY29weSgpO1xuICAgICAgICBjLmRpdmlkZSgpO1xuXG4gICAgICAgIGxldCBoYWxmV2lkdGggPSBjLncgLyAyO1xuICAgICAgICBsZXQgaGFsZkhlaWdodCA9IGMuaCAvIDI7XG5cbiAgICAgICAgeCA9IE1hdGguc2lnbih4KSAqIGhhbGZXaWR0aDtcbiAgICAgICAgeSA9IE1hdGguc2lnbih5KSAqIGhhbGZIZWlnaHQ7XG5cbiAgICAgICAgYy5hZGQoeCwgeSlcbiAgICAgICAgYy5jYWxjdWxhdGVCb3JkZXJzKCk7XG5cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxuXG4gICAgaW50ZXJzZWN0cyhiOiBCb3VuZGFyeSkge1xuICAgICAgICByZXR1cm4gKHRoaXMubGVmdEJvcmRlciA8PSBiLnJpZ2h0Qm9yZGVyICYmXG4gICAgICAgICAgICBiLmxlZnRCb3JkZXIgPD0gdGhpcy5yaWdodEJvcmRlciAmJlxuICAgICAgICAgICAgdGhpcy50b3BCb3JkZXIgPD0gYi5ib3R0b21Cb3JkZXIgJiZcbiAgICAgICAgICAgIGIudG9wQm9yZGVyIDw9IHRoaXMuYm90dG9tQm9yZGVyKVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFF1YWR0cmVlIHtcbiAgICBwb2ludHM6IFBvaW50W10gPSBbXTtcbiAgICBjaGlsZHJlbjogUXVhZHRyZWVDaGlsZHJlbiA9IHtcbiAgICAgICAgbnc6IG51bGwsXG4gICAgICAgIG5lOiBudWxsLFxuICAgICAgICBzdzogbnVsbCxcbiAgICAgICAgc2U6IG51bGwsXG4gICAgICAgIGlzU2V0OiBmYWxzZVxuICAgIH07XG5cbiAgICByZW5kZXJlcjogcDU7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgYm91bmRhcnk6IEJvdW5kYXJ5LCBwdWJsaWMgY2FwYWNpdHk6IG51bWJlcikge31cbiAgICBcbiAgICBzZXRSZW5kZXJlcihyZW5kZXJlcikge1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgbGV0IHIgPSB0aGlzLnJlbmRlcmVyO1xuICAgICAgICByLnJlY3RNb2RlKHIuQ0VOVEVSKTtcbiAgICAgICAgci5zdHJva2VXZWlnaHQoMik7XG4gICAgICAgIHIuc3Ryb2tlKDI1NSwgMjU1LCAyNTUpO1xuICAgICAgICByLm5vRmlsbCgpO1xuICAgICAgICByLnJlY3QodGhpcy5ib3VuZGFyeS54LCB0aGlzLmJvdW5kYXJ5LnksIHRoaXMuYm91bmRhcnkudywgdGhpcy5ib3VuZGFyeS5oKTtcblxuICAgICAgICB0aGlzLnBvaW50cy5mb3JFYWNoKHAgPT4ge1xuICAgICAgICAgICAgci5zdHJva2VXZWlnaHQoNCk7XG4gICAgICAgICAgICByLnN0cm9rZSgyMDAsIDU0LCAxMDApO1xuICAgICAgICAgICAgci5wb2ludChwLngsIHAueSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaXRhcmF0ZShjaGlsZCA9PiB7XG4gICAgICAgICAgICBjaGlsZC5zaG93KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHBhcmFtczogQm91bmRhcnlQYXJhbXMsIGNhcGFjaXR5OiBudW1iZXIpOiBRdWFkdHJlZSB7XG4gICAgICAgIGxldCBib3VuZGFyeSA9IG5ldyBCb3VuZGFyeShwYXJhbXMueCwgcGFyYW1zLnksIHBhcmFtcy5oLCBwYXJhbXMudyk7XG4gICAgICAgIGxldCBpbnN0YW5jZSA9IG5ldyBRdWFkdHJlZShib3VuZGFyeSwgY2FwYWNpdHkpO1xuXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBzdWJkaXZpZGUoKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ubncgPSBuZXcgUXVhZHRyZWUodGhpcy5ib3VuZGFyeS5jcmVhdGVDaGlsZCgtMSwgLTEpLCB0aGlzLmNhcGFjaXR5KVxuICAgICAgICAgICAgLnNldFJlbmRlcmVyKHRoaXMucmVuZGVyZXIpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLm5lID0gbmV3IFF1YWR0cmVlKHRoaXMuYm91bmRhcnkuY3JlYXRlQ2hpbGQoMSwgLTEpLCB0aGlzLmNhcGFjaXR5KVxuICAgICAgICAgICAgLnNldFJlbmRlcmVyKHRoaXMucmVuZGVyZXIpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnN3ID0gbmV3IFF1YWR0cmVlKHRoaXMuYm91bmRhcnkuY3JlYXRlQ2hpbGQoLTEsIDEpLCB0aGlzLmNhcGFjaXR5KVxuICAgICAgICAgICAgLnNldFJlbmRlcmVyKHRoaXMucmVuZGVyZXIpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnNlID0gbmV3IFF1YWR0cmVlKHRoaXMuYm91bmRhcnkuY3JlYXRlQ2hpbGQoMSwgMSksIHRoaXMuY2FwYWNpdHkpXG4gICAgICAgICAgICAuc2V0UmVuZGVyZXIodGhpcy5yZW5kZXJlcik7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uaXNTZXQgPSB0cnVlO1xuICAgIH1cblxuICAgIGluc2VydChwb2ludDogUG9pbnQpIHtcblxuICAgICAgICBpZighdGhpcy5ib3VuZGFyeS5jb250YWlucyhwb2ludCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRoaXMucG9pbnRzLmxlbmd0aCA8IHRoaXMuY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHRoaXMucG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYoIXRoaXMuY2hpbGRyZW4uaXNTZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YmRpdmlkZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLml0YXJhdGUoY2hpbGQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5pbnNlcnQocG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcXVlcnkoYm91bmRhcnk6IEJvdW5kYXJ5KTogUG9pbnRbXSB7XG4gICAgICAgIGxldCBwb2ludHMgPSBbXTtcblxuICAgICAgICBpZighdGhpcy5ib3VuZGFyeS5pbnRlcnNlY3RzKGJvdW5kYXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucG9pbnRzLmZvckVhY2gocCA9PiB7XG4gICAgICAgICAgICBpZihib3VuZGFyeS5jb250YWlucyhwKSkge1xuICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKHApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLml0YXJhdGUoY2hpbGQgPT4ge1xuICAgICAgICAgICAgcG9pbnRzID0gcG9pbnRzLmNvbmNhdChjaGlsZC5xdWVyeShib3VuZGFyeSkpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIHJldHVybiBwb2ludHM7XG4gICAgfVxuXG4gICAgaXRhcmF0ZShjYWxsYmFjayA9IChvKSA9PiB7fSkge1xuICAgICAgICBpZiAodGhpcy5jaGlsZHJlbi5pc1NldCkge1xuICAgICAgICAgICAgZm9yIChsZXQgY2hpbGQgaW4gdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuW2NoaWxkXSBpbnN0YW5jZW9mIFF1YWR0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY2hpbGRyZW5bY2hpbGRdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxufSIsImltcG9ydCB7IFF1YWR0cmVlLCBCb3VuZGFyeSB9IGZyb20gXCIuL2NvcmUvcXVhZHRyZWVcIjtcbmltcG9ydCB7IFBvaW50IH0gZnJvbSBcIi4vY29yZS9wb2ludFwiO1xuXG5sZXQgcXVhZFRyZWU6IFF1YWR0cmVlO1xubGV0IHNlYXJjaEFyZWE6IEJvdW5kYXJ5O1xubGV0IGZvdW5kOiBQb2ludFtdID0gW107XG5cbmxldCBza2V0Y2ggPSBmdW5jdGlvbihwOiBwNSkge1xuICAgIHAuc2V0dXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcC5jcmVhdGVDYW52YXMoODAwLCA4MDApO1xuXG4gICAgICAgIHF1YWRUcmVlID0gUXVhZHRyZWUuY3JlYXRlKHtcbiAgICAgICAgICAgIHg6IHAud2lkdGggLyAyLFxuICAgICAgICAgICAgeTogcC5oZWlnaHQgLyAyLFxuICAgICAgICAgICAgdzogcC53aWR0aCxcbiAgICAgICAgICAgIGg6IHAuaGVpZ2h0XG4gICAgICAgIH0sIDQpO1xuXG4gICAgICAgIHF1YWRUcmVlLnNldFJlbmRlcmVyKHApO1xuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCAzMDAwOyBpKyspIHtcbiAgICAgICAgICAgIC8vIGxldCB4ID0gcC5yYW5kb20ocC53aWR0aCk7XG4gICAgICAgICAgICAvLyBsZXQgeSA9IHAucmFuZG9tKHAuaGVpZ2h0KTtcbiAgICAgICAgICAgIGxldCB4ID0gcC5yYW5kb21HYXVzc2lhbihwLndpZHRoIC8gMiwgcC53aWR0aCAvIDQpO1xuICAgICAgICAgICAgbGV0IHkgPSBwLnJhbmRvbUdhdXNzaWFuKHAuaGVpZ2h0IC8gMiwgcC5oZWlnaHQgLyA0KTtcblxuICAgICAgICAgICAgbGV0IHBvaW50ID0gbmV3IFBvaW50KHgsIHkpO1xuICAgICAgICAgICAgcXVhZFRyZWUuaW5zZXJ0KHBvaW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlYXJjaEFyZWEgPSBuZXcgQm91bmRhcnkocC53aWR0aCAvIDIsIHAuaGVpZ2h0IC8gMiwgMTAwLCAxMDApO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKHF1YWRUcmVlKTtcbiAgICB9XG5cbiAgICBwLmRyYXcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcC5iYWNrZ3JvdW5kKDUxKTtcblxuICAgICAgICBxdWFkVHJlZS5zaG93KCk7XG5cbiAgICAgICAgcC5zdHJva2VXZWlnaHQoMik7XG4gICAgICAgIHAuc3Ryb2tlKDUwLCAyMDAsIDUwKTtcbiAgICAgICAgcC5yZWN0KHNlYXJjaEFyZWEueCwgc2VhcmNoQXJlYS55LCBzZWFyY2hBcmVhLncsIHNlYXJjaEFyZWEuaCk7XG5cbiAgICAgICAgZm91bmQuZm9yRWFjaChwdCA9PiB7XG4gICAgICAgICAgICBwLnN0cm9rZVdlaWdodCg0KTtcbiAgICAgICAgICAgIHAucG9pbnQocHQueCwgcHQueSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHAuZnJhbWVSYXRlKCkpO1xuICAgIH1cblxuICAgIHAubW91c2VDbGlja2VkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGxldCBwb2ludCA9IG5ldyBQb2ludChwLm1vdXNlWCwgcC5tb3VzZVkpO1xuICAgICAgICBxdWFkVHJlZS5pbnNlcnQocG9pbnQpO1xuICAgIH1cblxuICAgIHAubW91c2VNb3ZlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWFyY2hBcmVhLnggPSBwLm1vdXNlWDtcbiAgICAgICAgc2VhcmNoQXJlYS55ID0gcC5tb3VzZVk7XG4gICAgICAgIHNlYXJjaEFyZWEuY2FsY3VsYXRlQm9yZGVycygpO1xuXG4gICAgICAgIGZvdW5kID0gcXVhZFRyZWUucXVlcnkoc2VhcmNoQXJlYSk7XG4gICAgfVxufVxuXG5sZXQgYXBwICA9IG5ldyBwNShza2V0Y2gpOyJdLCJzb3VyY2VSb290IjoiIn0=